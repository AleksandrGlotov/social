{"version":3,"file":"static/js/560.70c693f3.chunk.js","mappings":"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","sources":["webpack://social-glot/./src/components/Friends/Friends.module.scss?25b4","webpack://social-glot/./src/components/common/Pagination/Pagination.module.scss?5523","components/common/Pagination/Pagination.tsx","webpack://social-glot/./src/components/Friends/FriendCard/FriendCard.module.scss?6af8","components/Friends/FriendCard/FriendCard.tsx","components/Forms/UsersSearchForm.tsx","components/Friends/Friends.tsx","components/Friends/FriendsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Friends_list__JvgtZ\",\"preloaderPosition\":\"Friends_preloaderPosition__Jzo8e\"};","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__rMtZe\",\"selected\":\"Pagination_selected__m0SkL\",\"leftArrow\":\"Pagination_leftArrow__0S1CY\",\"rightArrow\":\"Pagination_rightArrow__5S+y9\"};","import React, {useState} from 'react';\r\nimport s from './Pagination.module.scss'\r\n\r\ntype Props = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Pagination: React.FC<Props> = ({\r\n    totalUsersCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 5}) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(totalUsersCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const setLeftPageNumber = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    }\r\n    const setRightPageNumber = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged(portionNumber * portionSize + 1);\r\n    }\r\n\r\n    return (\r\n        <div className={s.pagination}>\r\n            { portionNumber > 1 && \r\n            <a className={s.leftArrow} onClick={() => {setLeftPageNumber()}}></a>}\r\n\r\n            { \r\n                pages.filter ( (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p, index) =>  {\r\n                    return <a key={index} className={currentPage === p ? s.selected : \"\"} \r\n                    onClick={ () => onPageChanged(p)}>{p}</a>\r\n                })\r\n            }\r\n\r\n            { portionCount > portionNumber &&\r\n            <a className={s.rightArrow} onClick={() => {setRightPageNumber()}}></a>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Pagination;","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"FriendCard_card__1qAAX\",\"friendInfo\":\"FriendCard_friendInfo__h-wK2\",\"head\":\"FriendCard_head__nQHrJ\"};","import React from 'react';\r\nimport s from './FriendCard.module.scss'\r\nimport { NavLink } from 'react-router-dom';\r\nimport noPhoto from '../../../assets/images/noPhoto.webp'\r\nimport { UserType } from '../../../types/types';\r\n\r\ntype Props = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet FriendCard: React.FC<Props> = ({ user, followingInProgress, unfollow, follow }) => {\r\n    return (\r\n        <div className={s.card}>\r\n            <NavLink to={\"/profile/\" + user.id}>\r\n                <img src={user.photos.small != null ? user.photos.small : noPhoto}></img>\r\n            </NavLink>\r\n            <div className={s.friendInfo}>\r\n                <div className={s.head}>\r\n                    <h3>{user.name}</h3>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => { unfollow(user.id) }}>Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => { follow(user.id) }}>Follow</button>}\r\n                    </div>\r\n                </div>\r\n                <i>{user.status != null ? user.status : \"\"}</i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FriendCard;","import React from 'react';\r\nimport s from './forms.module.scss'\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { UserFilterType } from '../../Redux/friendsReducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersSearchFilter } from '../../Redux/usersSelector';\r\n\r\n\r\nconst validationSchemaUsersSearch = Yup.object().shape({\r\n   term: Yup.string()\r\n      .min(1, \"\")\r\n});\r\n\r\ntype Props = {\r\n   onFilterChanged: (filter: UserFilterType) => void\r\n}\r\n\r\nconst UsersSearchForm: React.FC<Props> = React.memo((props) => {\r\n\r\n   const filter = useSelector(getUsersSearchFilter)\r\n\r\n   const submit = (values: UserFilterType) => {\r\n      props.onFilterChanged(values)\r\n   }\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize={true}\r\n         initialValues={{\r\n           term: filter.term, friend: filter.friend\r\n         }}\r\n         validationSchema={validationSchemaUsersSearch}\r\n         onSubmit={submit}\r\n      >\r\n         {({errors}) => (\r\n            <Form className={s.search}>\r\n               <Field \r\n                   name={'term'}\r\n                   type={'text'}\r\n                   placeholder={'Find somebody...'}\r\n               />\r\n               <Field name=\"friend\" as=\"select\">\r\n                  <option value=\"\">All</option>\r\n                  <option value=\"true\">Only followed</option>\r\n                  <option value=\"false\">Only unfollowed</option>\r\n               </Field>\r\n               <button type={'submit'}>Find</button>\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   )\r\n})\r\n\r\nexport default UsersSearchForm;","import React, { useEffect } from 'react';\r\nimport s from './Friends.module.scss'\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport FriendCard from './FriendCard/FriendCard';\r\nimport UsersSearchForm from '../Forms/UsersSearchForm';\r\nimport { getUsers, follow as _follow , unfollow as _unfollow, actions, UserFilterType } from '../../Redux/friendsReducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsersFilter, getUsersSearchFilter } from '../../Redux/usersSelector';\r\nimport { AppDispatch } from '../../Redux/redux-store';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\ntype Props = {\r\n\r\n}\r\n\r\nexport const Friends: React.FC<Props> = (props) => {\r\n\r\n    const users = useSelector(getUsersFilter)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersSearchFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter));\r\n        actions.setCurrentPage(pageNumber);\r\n    }\r\n\r\n    const onFilterChanged = (filter: UserFilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(_follow(userId))\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        dispatch(_unfollow(userId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let term = searchParams.get(\"term\")\r\n        let friend = searchParams.get(\"friend\")\r\n        let page = searchParams.get(\"page\")\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!page) {\r\n            actualPage = +page\r\n        }\r\n\r\n        if (!!term) {\r\n            actualFilter = {...actualFilter, term: term}\r\n        }\r\n\r\n        if (!!friend) {\r\n            actualFilter = {...actualFilter,\r\n                friend: friend === \"null\" ? null\r\n                : friend === \"true\" ? true : false\r\n            }\r\n        }\r\n\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setSearchParams(`?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`)\r\n    }, [filter, currentPage])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Friends</h1>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <div className={s.list}>\r\n                {\r\n                    users.map( u => <FriendCard \r\n                        key={u.id}\r\n                        user={u}\r\n                        followingInProgress={followingInProgress}\r\n                        unfollow={unfollow}\r\n                        follow={follow} />\r\n                    )\r\n                }\r\n            </div> \r\n            <Pagination \r\n                totalUsersCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport s from './Friends.module.scss'\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getIsAuth, getIsFetching } from '../../Redux/usersSelector';\r\nimport { Friends } from './Friends';\r\nimport { Navigate } from 'react-router';\r\n\r\ntype Props = {\r\n    \r\n}\r\n\r\nconst FriendsPage: React.FC<Props> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.preloaderPosition}>\r\n            { isFetching ? < Preloader /> : null }\r\n            <Friends />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsPage"],"names":["totalUsersCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","s","onClick","filter","p","map","index","user","followingInProgress","unfollow","follow","to","id","src","photos","small","noPhoto","name","followed","disabled","some","status","validationSchemaUsersSearch","Yup","shape","term","min","React","props","useSelector","getUsersSearchFilter","enableReinitialize","initialValues","friend","validationSchema","onSubmit","values","onFilterChanged","errors","type","placeholder","as","value","Friends","users","getUsersFilter","getTotalUsersCount","getCurrentPage","getPageSize","getFollowingInProgress","dispatch","useDispatch","useSearchParams","searchParams","setSearchParams","userId","_follow","_unfollow","useEffect","get","page","actualPage","actualFilter","getUsers","u","pageNumber","actions","isFetching","getIsFetching","getIsAuth","Preloader"],"sourceRoot":""}