{"version":3,"file":"static/js/998.69d0c579.chunk.js","mappings":"oPACA,EAA8B,0BAA9B,EAA+D,mBAA/D,EAAwF,kBAAxF,EAAiH,mBAAjH,EAA2I,mBAA3I,EAA4K,0B,SCe5K,EAZyDA,EAAAA,MAAY,YAAgB,IAAdC,EAAa,EAAbA,QACnE,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAOC,IAAKH,EAAQI,SACpC,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAyBF,EAAQK,YACjC,yBAAML,EAAQA,mBCJjBM,EAA4B,WAErC,IAAMC,GAAWC,EAAAA,EAAAA,KAAa,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC5DI,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAC,EAAAA,EAAAA,YAAW,WACY,IAAD,EAAdF,IACA,UAAAH,EAAkBM,eAAlB,SAA2BC,gBAAe,MAE/C,CAACX,KAGA,iBAAKN,UAAWC,EAAeiB,SAhBb,SAACC,GACnB,IAAIC,EAAUD,EAAEE,cACZC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Eb,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKR,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAAC,EAAD,CAAY9B,QAAS6B,GAAQC,OACzD,gBAAKC,IAAKpB,QCxBTqB,EAA4B,WAErC,OAA8BnB,EAAAA,EAAAA,UAAS,IAAvC,eAAOb,EAAP,KAAgBiC,EAAhB,KACMC,GAAS1B,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKwB,UACzDC,GAAwBC,EAAAA,EAAAA,MAS9B,OACI,iBAAKnC,UAAWC,EAAhB,WACI,kBAAOmC,SAAU,SAACjB,GAAD,OAAOa,EAAWb,EAAEE,cAAcgB,QAAQA,MAAOtC,KAClE,mBAAQuC,SAAqB,UAAXL,EAAoBM,QAVnB,WAClBxC,IAGLmC,GAASM,EAAAA,EAAAA,IAAYzC,IACrBiC,EAAW,MAKP,sBCGCS,EAAiB,WAE1B,IAAMP,GAAwBC,EAAAA,EAAAA,MACxBF,GAAS1B,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKwB,UAEzDS,GAASnC,EAAAA,EAAAA,IAAYoC,EAAAA,IAW3B,OAPA5B,EAAAA,EAAAA,YAAW,WAEP,OADAmB,GAASU,EAAAA,EAAAA,OACF,WACHV,GAASW,EAAAA,EAAAA,UAEd,IAEEH,GAKD,UAAC,EAAAI,SAAD,WACgB,UAAXb,IAAsB,kEACvB,SAAC5B,EAAD,KACA,SAAC0B,EAAD,QAPG,SAAC,KAAD,CAAUgB,GAAI,YAY7B,EAtC2B,WACvB,OACI,4BACI,kCACA,SAACN,EAAD","sources":["webpack://social-glot/./src/components/Chat/Chat.module.scss?7ce7","components/Chat/MessageHistory/DialogItem/DialogItem.tsx","components/Chat/MessageHistory/MessageHistory.tsx","components/Chat/SendMessageForm/SendMessageHistory.tsx","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatHistory\":\"Chat_chatHistory__ZQCyU\",\"item\":\"Chat_item__K-Y8t\",\"ava\":\"Chat_ava__YxRxt\",\"name\":\"Chat_name__q9Nj+\",\"body\":\"Chat_body__dvFOJ\",\"sendMessage\":\"Chat_sendMessage__kylJ8\"};","import React from 'react';\r\nimport { ChatMessageType } from '../../ChatPage';\r\nimport s from '../../Chat.module.scss'\r\n\r\nconst DialogItem: React.FC<{message: ChatMessageType}> = React.memo( ({message}) => {\r\n    return (\r\n        <div className={s.item} >\r\n            <img className={s.ava} src={message.photo}></img>\r\n            <div className={s.body}>\r\n                <div className={s.name}>{message.userName}</div>\r\n                <div>{message.message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default DialogItem;","import { useEffect, useRef, useState} from \"react\"\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from \"../../../Redux/redux-store\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport s from '../Chat.module.scss'\r\n\r\nexport const MessagesHistory: React.FC = () => {\r\n\r\n    const messages = useSelector( (state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 100) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView(true);\r\n        }\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className={s.chatHistory} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <DialogItem message={m} key={index} /> )}\r\n            <div ref={messagesAnchorRef} ></div>\r\n        </div>\r\n    )\r\n}","import { useState} from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sendMessage } from \"../../../Redux/chatReducer\";\r\nimport { AppDispatch, AppStateType } from \"../../../Redux/redux-store\";\r\nimport s from '../Chat.module.scss'\r\n\r\nexport const SendMassageForm: React.FC = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        } \r\n        dispatch(sendMessage(message))\r\n        setMessage('')   \r\n    }\r\n    return (\r\n        <div className={s.sendMessage} >\r\n            <input onChange={(e) => setMessage(e.currentTarget.value)} value={message}></input>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>send</button>\r\n        </div>\r\n    )\r\n}","import { Fragment, useEffect} from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from \"react-router\";\r\nimport { startMessagesListening, stopMessagesListening } from '../../Redux/chatReducer';\r\nimport { AppDispatch, AppStateType } from \"../../Redux/redux-store\";\r\nimport { getIsAuth } from \"../../Redux/usersSelector\";\r\nimport { MessagesHistory } from \"./MessageHistory/MessageHistory\";\r\nimport { SendMassageForm } from \"./SendMessageForm/SendMessageHistory\";\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <h1>Chat</h1>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Chat: React.FC = () => {\r\n\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    \r\n\r\n    useEffect( () => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {status === 'error' && <div>Some error. Please refresh the page</div>}\r\n            <MessagesHistory />\r\n            <SendMassageForm />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"names":["React","message","className","s","src","photo","userName","MessagesHistory","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","SendMassageForm","setMessage","status","dispatch","useDispatch","onChange","value","disabled","onClick","sendMessage","Chat","isAuth","getIsAuth","startMessagesListening","stopMessagesListening","Fragment","to"],"sourceRoot":""}